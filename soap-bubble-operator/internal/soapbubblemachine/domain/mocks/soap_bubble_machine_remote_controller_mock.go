// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	soapbubblemachinedomain "github.com/AntonioMartinezFernandez/soap-bubble-project/soap-bubble-operator/internal/soapbubblemachine/domain"
	mock "github.com/stretchr/testify/mock"
)

// SoapBubbleMachineRemoteController is an autogenerated mock type for the SoapBubbleMachineRemoteController type
type SoapBubbleMachineRemoteController struct {
	mock.Mock
}

// SwitchOff provides a mock function with given fields: ctx, soapBubbleMachine
func (_m *SoapBubbleMachineRemoteController) SwitchOff(ctx context.Context, soapBubbleMachine soapbubblemachinedomain.SoapBubbleMachine) error {
	ret := _m.Called(ctx, soapBubbleMachine)

	if len(ret) == 0 {
		panic("no return value specified for SwitchOff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, soapbubblemachinedomain.SoapBubbleMachine) error); ok {
		r0 = rf(ctx, soapBubbleMachine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SwitchOn provides a mock function with given fields: ctx, soapBubbleMachine
func (_m *SoapBubbleMachineRemoteController) SwitchOn(ctx context.Context, soapBubbleMachine soapbubblemachinedomain.SoapBubbleMachine) error {
	ret := _m.Called(ctx, soapBubbleMachine)

	if len(ret) == 0 {
		panic("no return value specified for SwitchOn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, soapbubblemachinedomain.SoapBubbleMachine) error); ok {
		r0 = rf(ctx, soapBubbleMachine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSoapBubbleMachineRemoteController creates a new instance of SoapBubbleMachineRemoteController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSoapBubbleMachineRemoteController(t interface {
	mock.TestingT
	Cleanup(func())
}) *SoapBubbleMachineRemoteController {
	mock := &SoapBubbleMachineRemoteController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
